// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rtmvnormcpp
arma::mat rtmvnormcpp(const arma::mat& mean, const arma::mat& sigma, const arma::mat& blc, const arma::mat& lower, const arma::mat& upper, arma::mat& init, const arma::uword burn);
RcppExport SEXP _tmvtnsim_rtmvnormcpp(SEXP meanSEXP, SEXP sigmaSEXP, SEXP blcSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP initSEXP, SEXP burnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type blc(blcSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type init(initSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type burn(burnSEXP);
    rcpp_result_gen = Rcpp::wrap(rtmvnormcpp(mean, sigma, blc, lower, upper, init, burn));
    return rcpp_result_gen;
END_RCPP
}
// rtmvtcpp
arma::mat rtmvtcpp(const arma::mat& mean, const arma::mat& sigma, const double nu, const arma::mat& blc, const arma::mat& lower, const arma::mat& upper, arma::mat& init, const arma::uword burn);
RcppExport SEXP _tmvtnsim_rtmvtcpp(SEXP meanSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP blcSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP initSEXP, SEXP burnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type blc(blcSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type init(initSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type burn(burnSEXP);
    rcpp_result_gen = Rcpp::wrap(rtmvtcpp(mean, sigma, nu, blc, lower, upper, init, burn));
    return rcpp_result_gen;
END_RCPP
}
// norm_rej
double norm_rej(const double a, const double b);
RcppExport SEXP _tmvtnsim_norm_rej(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(norm_rej(a, b));
    return rcpp_result_gen;
END_RCPP
}
// unif_rej
double unif_rej(const double a, const double b);
RcppExport SEXP _tmvtnsim_unif_rej(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(unif_rej(a, b));
    return rcpp_result_gen;
END_RCPP
}
// halfnorm_rej
double halfnorm_rej(const double a, const double b);
RcppExport SEXP _tmvtnsim_halfnorm_rej(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(halfnorm_rej(a, b));
    return rcpp_result_gen;
END_RCPP
}
// exp_rej
double exp_rej(const double a, const double b);
RcppExport SEXP _tmvtnsim_exp_rej(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(exp_rej(a, b));
    return rcpp_result_gen;
END_RCPP
}
// rtnormcpp
arma::vec rtnormcpp(const arma::vec& mean, const double sd, const arma::vec& lower, const arma::vec& upper);
RcppExport SEXP _tmvtnsim_rtnormcpp(SEXP meanSEXP, SEXP sdSEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const double >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(rtnormcpp(mean, sd, lower, upper));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_tmvtnsim_rtmvnormcpp", (DL_FUNC) &_tmvtnsim_rtmvnormcpp, 7},
    {"_tmvtnsim_rtmvtcpp", (DL_FUNC) &_tmvtnsim_rtmvtcpp, 8},
    {"_tmvtnsim_norm_rej", (DL_FUNC) &_tmvtnsim_norm_rej, 2},
    {"_tmvtnsim_unif_rej", (DL_FUNC) &_tmvtnsim_unif_rej, 2},
    {"_tmvtnsim_halfnorm_rej", (DL_FUNC) &_tmvtnsim_halfnorm_rej, 2},
    {"_tmvtnsim_exp_rej", (DL_FUNC) &_tmvtnsim_exp_rej, 2},
    {"_tmvtnsim_rtnormcpp", (DL_FUNC) &_tmvtnsim_rtnormcpp, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_tmvtnsim(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
